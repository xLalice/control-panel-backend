generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MARKETING
  SALES
  LOGISTICS
  ACCOUNTING
}

model FacebookCreds {
  id                Int      @id @default(autoincrement())
  user_access_token String   @unique
  page_access_token String
  page_id           String
  expiry_date       DateTime
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  role              Role
  name              String
  // New field to distinguish OJTs
  isOJT             Boolean           @default(false)
  // OJT-specific fields (optional)
  ojtStartDate      DateTime?         // When the OJT started
  ojtEndDate        DateTime?         // When the OJT is expected to end
  ojtSupervisorId   String?           // Optional reference to another User as supervisor
  ojtSupervisor     User?             @relation("OJTsSupervised", fields: [ojtSupervisorId], references: [id])
  supervisedOJTs    User[]            @relation("OJTsSupervised") // For supervisors

  // Existing relationships
  assignedLeads     Lead[]            @relation("assignedLeads")
  createdLeads      Lead[]            @relation("createdLeads")
  createdLogs       ActivityLog[]
  reports           Report[]
  inquiries         Inquiry[]
  documents         Document[]

  // OJT-specific relationship (previously in OJT model)
  attendanceRecords Attendance[]      // Updated to reference User instead of OJT
  allowedIPs        AllowedIP[]       // Optional IP restrictions for OJTs

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Report {
  id           String   @id @default(uuid())
  date         DateTime
  reportedById String
  reportedBy   User     @relation(fields: [reportedById], references: [id])
  location     String   @default("Remote")
  department   Role
  taskDetails  String
  createdAt    DateTime @default(now())
}

enum LeadStatus {
  New
  Contacted
  Qualified
  Proposal
  Negotiation 
  Converted
  FollowUp 
  Lost
}


model Company {
  id          String  @id @default(uuid())
  name        String @unique
  industry    String?
  region      String?
  email       String? @unique
  phone       String? @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  leads       Lead[]
}

model Lead {
  id              String       @id @default(uuid())
  companyId       String
  company         Company  @relation(fields: [companyId], references: [id])
  contactPerson   String?      
  email           String? @unique
  phone           String? @unique
  status          LeadStatus   @default(New)
  source          String
  subSource       String?
  campaign        String?
  assignedToId    String?
  assignedTo      User?         @relation(fields: [assignedToId], references: [id], name: "assignedLeads")
  createdById     String
  createdBy       User @relation(fields: [createdById], references: [id], name: "createdLeads")  
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  lastContactDate DateTime?
  estimatedValue  Float?
  leadScore       Float?
  contactHistory  ContactHistory[]
  inquiries        Inquiry[]
  industry        String?      
  region          String?
  referredBy      String?
  followUpDate    DateTime?
  activityLog     ActivityLog[]

  @@index([email]) 
  @@index([phone])
  @@index([createdById])
}

model ActivityLog {
  id          String   @id @default(uuid())
  leadId      String
  userId      String
  createdById String
  action      String
  description String
  metadata    Json?
  oldStatus   LeadStatus?
  newStatus   LeadStatus?

  createdAt   DateTime @default(now())
  lead        Lead     @relation(fields: [leadId], references: [id])
  createdBy   User     @relation(fields: [createdById], references: [id]) 

  @@index([leadId])
  @@index([userId])
  @@index([createdById])
  @@index([createdAt])
}

model ContactHistory {
  id          String   @id @default(uuid())
  leadId      String
  method      String   
  summary     String
  outcome     String?
  timestamp   DateTime @default(now())

  lead        Lead     @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([timestamp])
}

model Task {
  id Int @id @default(autoincrement())
}

model Post {
  id        String   @id @default(uuid())
  fbPostId  String   @unique
  postType  String
  content   String?
  mediaUrl  String?
  createdAt DateTime 
  updatedAt DateTime @updatedAt

  likes       Int @default(0)
  comments    Int @default(0)
  shares      Int @default(0)
  reach       Int @default(0)
  impressions Int @default(0)

  // Historical metrics (time-series data)
  metrics PostMetric[]
}

model PostMetric {
  id          String   @id @default(uuid())
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
  likes       Int
  comments    Int
  shares      Int
  reach       Int
  impressions Int
  fetchedAt   DateTime @default(now())
}

model PageMetric {
  id              String   @id @default(uuid())
  followerCount   Int
  pageViews       Int
  pageImpressions Int
  pageReach       Int
  engagement      Int // Total engagements (likes + comments + shares)
  date            DateTime // Date of the metrics (YYYY-MM-DD format)
  fetchedAt       DateTime @default(now())

  @@unique([date]) // Ensure no duplicate metrics for the same date
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedBy   String
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}



model Product {
  id          String   @id @default(uuid())
  category    String   
  name        String
  description String
  pricingModel String  
  unit        String?
  pickUpPrice Float?
  deliveryPrice Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  
  aggregate      Aggregate?
  heavyEquipment HeavyEquipment?
  steel          Steel?
}

model Aggregate {
  id        String   @id @default(uuid())
  source    String  
  
  
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model HeavyEquipment {
  id        String   @id @default(uuid())
  equipmentType String? 
  
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Steel {
  id        String   @id @default(uuid())
  grade     String?
  length    String?
  
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Inquiry
enum DeliveryMethod {
  Delivery
  Pickup
  ThirdParty
}

enum ReferenceSource {
  Facebook
  Instagram
  TikTok
  Referral
  Flyers
  Other
}

model Inquiry {
  id               String          @id @default(uuid())
  customerName     String
  phoneNumber      String
  email            String
  isCompany        Boolean         @default(false)
  companyName      String?
  companyAddress   String?
  productType      String
  quantity         Int
  deliveryMethod   DeliveryMethod
  deliveryLocation String
  preferredDate    DateTime
  referenceSource  ReferenceSource
  remarks          String?
  status           InquiryStatus          @default(New) 
  
  quotedPrice      Float?
  quotedBy         String?
  quotedAt         DateTime?
  
  relatedLeadId    String?
  relatedLead      Lead?           @relation(fields: [relatedLeadId], references: [id])
  
  createdById      String
  createdBy        User            @relation(fields: [createdById], references: [id])
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@index([createdById])
  @@index([status])
  @@index([createdAt])
  @@index([relatedLeadId])
}

enum InquiryStatus {
  New
  Quoted 
  Approved
  Scheduled
  Fulfilled
  Cancelled
}

model DocumentCategory {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  documents   Document[]
}

model Document {
  id           Int              @id @default(autoincrement())
  title        String
  filename     String
  fileType     String
  fileSize     Int
  filePath     String
  uploadedBy   User             @relation(fields: [uploadedById], references: [id])
  uploadedById String
  category     DocumentCategory @relation(fields: [categoryId], references: [id])
  categoryId   Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum AttendanceStatus {
  PRESENT
  LATE
  ON_BREAK
  LOGGED_OUT
}

model Attendance {
  id          String            @id @default(uuid())
  userId      String            
  user        User              @relation(fields: [userId], references: [id]) 
  date        DateTime          @default(now())
  timeIn      DateTime          @default(now())
  timeOut     DateTime?
  status      String  
  totalHours  Float?
  ipAddress   String?
  device      String?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  breakLogs   BreakLog[]

  @@index([userId])
  @@index([date])
  @@index([status])
}

model AllowedIP {
  id           String    @id @default(uuid())
  userId       String    // Changed from ojtId to userId
  user         User      @relation(fields: [userId], references: [id]) // Changed from ojt to user
  ipAddress    String
  description  String?
  createdAt    DateTime  @default(now())

  @@unique([userId, ipAddress])
}

model BreakLog {
  id           String     @id @default(uuid())
  attendanceId String
  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  startTime    DateTime   @default(now())
  endTime      DateTime?
  duration     Float?
  reason       String?

  @@index([attendanceId])
}

model DTRSettings {
  id                  String    @id @default(cuid())
  workStartTime       String    @default("08:00")
  lateThreshold       Int       @default(15)
  allowRemoteLogin    Boolean   @default(false)
  autoRemindersActive Boolean   @default(true)
  updatedById         String
  updatedAt           DateTime  @updatedAt
}