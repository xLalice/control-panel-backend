generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[]  @relation("RolePermissions")
  users       User[]       @relation("RoleUsers")
}

model Permission {
  id         Int          @id @default(autoincrement())
  name        String       @unique
  module    String
  roles       Role[]       @relation("RolePermissions")
}



model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  roleId   Int    @default(1)
  role     Role   @relation(fields: [roleId], references: [id], name: "RoleUsers")
  name     String

  isOJT        Boolean   @default(false)
  // OJT-specific fields (optional)
  ojtStartDate DateTime?
  ojtEndDate   DateTime?

  assignedInquiryies Inquiry[]    @relation("assignedInquiries")
  assignedLeads Lead[]        @relation("assignedLeads")
  createdLeads  Lead[]        @relation("createdLeads")
  createdLogs   ActivityLog[]
  reports       Report[]
  inquiries     Inquiry[]
  documents     Document[]

  attendanceRecords Attendance[]
  allowedIPs        AllowedIP[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id           String   @id @default(uuid())
  date         DateTime
  reportedById String
  reportedBy   User     @relation(fields: [reportedById], references: [id])
  location     String   @default("Remote")
  taskDetails  String
  createdAt    DateTime @default(now())
}

enum LeadStatus {
  New
  Contacted
  Qualified
  Proposal
  Negotiation
  Converted
  FollowUp
  Lost
}

model Company {
  id        String   @id @default(uuid())
  name      String   @unique
  industry  String?
  region    String?
  email     String?  @unique
  phone     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leads     Lead[]
}

model Lead {
  id              String           @id @default(uuid())
  companyId       String
  company         Company          @relation(fields: [companyId], references: [id])
  contactPerson   String?
  email           String?          @unique
  phone           String?          @unique
  status          LeadStatus       @default(New)
  source          String
  subSource       String?
  campaign        String?
  assignedToId    String?
  assignedTo      User?            @relation(fields: [assignedToId], references: [id], name: "assignedLeads")
  createdById     String
  createdBy       User             @relation(fields: [createdById], references: [id], name: "createdLeads")
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastContactDate DateTime?
  estimatedValue  Float?
  leadScore       Float?
  contactHistory  ContactHistory[]
  inquiries       Inquiry[]
  industry        String?
  region          String?
  referredBy      String?
  followUpDate    DateTime?
  activityLog     ActivityLog[]

  @@index([email])
  @@index([phone])
  @@index([createdById])
}

model ActivityLog {
  id          String      @id @default(uuid())
  leadId      String
  userId      String
  createdById String
  action      String
  description String
  metadata    Json?
  oldStatus   LeadStatus?
  newStatus   LeadStatus?

  createdAt DateTime @default(now())
  lead      Lead     @relation(fields: [leadId], references: [id])
  createdBy User     @relation(fields: [createdById], references: [id])

  @@index([leadId])
  @@index([userId])
  @@index([createdById])
  @@index([createdAt])
}

model ContactHistory {
  id        String   @id @default(uuid())
  leadId    String
  method    String
  summary   String
  outcome   String?
  timestamp DateTime @default(now())

  lead Lead @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([timestamp])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedBy   String
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum Category {
  AGGREGATE
  HEAVY_EQUIPMENT
  STEEL
}

enum PricingUnit {
  DAY
  METER
  KILOGRAM
  TON
}

model Product {
  id             String      @id @default(uuid())
  category       Category // e.g., "Aggregate", "Heavy Equipment", "Steel"
  sku         String   @unique 
  name           String
  description    String
  basePrice      Decimal // e.g., 5500.00
  pricingUnit    PricingUnit // e.g., "day", "meter", "kilogram"
  pricingDetails Json? // e.g., { "hoursPerDay": 8 }
  unit           String? // e.g., "piece", "bundle"
  pickUpPrice    Decimal?
  deliveryPrice  Decimal?
  isActive       Boolean @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  aggregate      Aggregate?
  heavyEquipment HeavyEquipment?
  steel          Steel?
}

model Aggregate {
  id            String @id @default(uuid())
  source        String
  weightPerUnit Float?

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model HeavyEquipment {
  id            String  @id @default(uuid())
  equipmentType String? // e.g., "Crane", "Bulldozer"

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Steel {
  id                   String  @id @default(uuid())
  grade                String? // e.g., "Grade 60"
  length               String? // e.g., "6m"
  type                 String? // e.g., "Angle Bar", "GI Pipe"
  color                String? // e.g., "Silver"
  size                 String? // e.g., "2x2"
  additionalAttributes Json? // e.g., { "thickness": "2mm" }

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Inquiry
enum DeliveryMethod {
  Delivery
  Pickup
  ThirdParty
}

enum ReferenceSource {
  Facebook
  Instagram
  TikTok
  Referral
  Flyers
  Other
}

enum Priority {
  Low
  Medium
  High
  Urgent
}

enum InquiryType {
  PricingRequest
  ProductAvailability
  TechnicalQuestion
  DeliveryInquiry
  Other
}

model Inquiry {
  id               String          @id @default(uuid())
  customerName     String
  phoneNumber      String
  email            String
  isCompany        Boolean         @default(false)
  companyName      String?
  companyAddress   String?
  productType      String          // e.g., "GI Pipe", "Steel"
  inquiryType      InquiryType
  quantity         Int
  deliveryMethod   DeliveryMethod
  deliveryLocation String
  preferredDate    DateTime
  referenceSource  ReferenceSource
  remarks          String?
  status           InquiryStatus   @default(New)
  priority         Priority?
  dueDate          DateTime?

  quotedPrice Float?
  quotedBy    String?
  quotedAt    DateTime?

  relatedLeadId String?
  relatedLead   Lead?   @relation(fields: [relatedLeadId], references: [id])

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  assignedToId     String?
  assignedTo       User?  @relation(fields: [assignedToId], references: [id], name: "assignedInquiries")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdById])
  @@index([assignedToId])
  @@index([status])
  @@index([createdAt])
  @@index([dueDate])
  @@index([priority])
  @@index([relatedLeadId])
  @@index([customerName])
  @@index([phoneNumber])
  @@index([email])
  @@index([inquiryType])
}

enum InquiryStatus {
  New
  Quoted
  Approved
  Scheduled
  Fulfilled
  Cancelled
}

model DocumentCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  documents   Document[]
}

model Document {
  id           Int              @id @default(autoincrement())
  title        String
  filename     String
  fileType     String
  fileSize     Int
  filePath     String
  uploadedBy   User             @relation(fields: [uploadedById], references: [id])
  uploadedById String
  category     DocumentCategory @relation(fields: [categoryId], references: [id])
  categoryId   Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum AttendanceStatus {
  PRESENT
  LATE
  ON_BREAK
  LOGGED_OUT
}

model Attendance {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  date       DateTime   @default(now())
  timeIn     DateTime   @default(now())
  timeOut    DateTime?
  status     String
  totalHours Float?
  ipAddress  String?
  device     String?
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  breakLogs  BreakLog[]

  @@index([userId])
  @@index([date])
  @@index([status])
}

model AllowedIP {
  id          String   @id @default(uuid())
  userId      String // Changed from ojtId to userId
  user        User     @relation(fields: [userId], references: [id]) // Changed from ojt to user
  ipAddress   String
  description String?
  createdAt   DateTime @default(now())

  @@unique([userId, ipAddress])
}

model BreakLog {
  id           String     @id @default(uuid())
  attendanceId String
  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  startTime    DateTime   @default(now())
  endTime      DateTime?
  duration     Float?
  reason       String?

  @@index([attendanceId])
}

model DTRSettings {
  id                  String   @id @default(cuid())
  workStartTime       String   @default("08:00")
  lateThreshold       Int      @default(15)
  allowRemoteLogin    Boolean  @default(false)
  autoRemindersActive Boolean  @default(true)
  updatedById         String
  updatedAt           DateTime @updatedAt
}
