generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MARKETING
  SALES
  LOGISTICS
  ACCOUNTING
}

model FacebookCreds {
  id    Int   @id     @default(autoincrement())
  user_access_token String  @unique
  page_access_token String
  page_id     String  
  expiry_date   DateTime
}

model GoogleAuth {
  id           Int      @id @default(autoincrement())
  type         String
  clientId     String
  clientSecret String
  redirectUris String  
  refreshToken String?
  accessToken  String?
  tokenType    String?
  expiryDate   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role
  name      String
  leads     Lead[]
  reports   Report[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id           String   @id @default(uuid())
  date         DateTime
  reportedById String
  reportedBy   User     @relation(fields: [reportedById], references: [id])
  location     String   @default("Remote")
  department   Role   
  taskDetails  String
  createdAt    DateTime @default(now())
}


model Lead {
  id          Int          @id @default(autoincrement())
  sheetName   String
  data        Json
  status      LeadStatus    @default(New)
  leadOwnerId String?        @unique
  leadOwner   User?          @relation(fields: [leadOwnerId], references: [id]) 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Task {
  id    Int     @id @default(autoincrement())

}

model Post {
  id               String    @id @default(uuid())
  fbPostId         String    @unique
  postType         String    
  content          String?
  mediaUrl         String?
  createdAt        DateTime  // Post creation time on Facebook
  updatedAt        DateTime  @updatedAt
  
  // Current metrics
  likes            Int       @default(0)
  comments         Int       @default(0)
  shares           Int       @default(0)
  reach            Int       @default(0)
  impressions      Int       @default(0)
  
  // Historical metrics (time-series data)
  metrics          PostMetric[]
}

model PostMetric {
  id               String    @id @default(uuid())
  post             Post      @relation(fields: [postId], references: [id])
  postId           String
  likes            Int
  comments         Int
  shares           Int
  reach            Int
  impressions      Int
  fetchedAt        DateTime  @default(now())
}

model PageMetric {
  id               String    @id @default(uuid())
  followerCount    Int
  pageViews        Int
  pageImpressions  Int
  pageReach        Int
  engagement       Int       // Total engagements (likes + comments + shares)
  date             DateTime  // Date of the metrics (YYYY-MM-DD format)
  fetchedAt        DateTime  @default(now())

  @@unique([date]) // Ensure no duplicate metrics for the same date
}


model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedBy   String
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum LeadStatus {
  New
  InProgress
  Converted
  Closed
}

  model Equipment {
    id            String   @id @default(uuid())
    name          String
    type          String
    model         String?
    manufacturer  String?
    status        EquipmentStatus @default(Available)
    hourlyRate    Decimal
    dailyRate     Decimal
    weeklyRate    Decimal?
    imageUrl      String?
    maintenanceSchedule DateTime?
    lastMaintenance    DateTime?
    purchaseDate      DateTime?
    priceHistory  EquipmentPriceHistory[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
  }

  enum EquipmentStatus {
    Available
    InUse
    Maintenance
    Repairs
  }

  model EquipmentPriceHistory {
    id          String    @id @default(uuid())
    equipment   Equipment @relation(fields: [equipmentId], references: [id])
    equipmentId String
    oldHourlyRate Decimal
    newHourlyRate Decimal
    oldDailyRate  Decimal
    newDailyRate  Decimal
    changedBy    String
    changedAt    DateTime @default(now())
  }

  model Aggregate {
    id          String   @id @default(uuid())
    name        String
    type        String   // e.g., Sand, Gravel, etc.
    source      Source   // Batangas or Montalban
    pickupPrice Decimal
    deliveryPrice Decimal
    unit        String   // e.g., cu.m
    stockLevel  Int?
    minStock    Int?    // For alerts
    priceHistory AggregatePriceHistory[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
  }

  enum Source {
    Batangas
    Montalban
  }

  model AggregatePriceHistory {
    id            String    @id @default(uuid())
    aggregate     Aggregate @relation(fields: [aggregateId], references: [id])
    aggregateId   String
    oldPickupPrice  Decimal
    newPickupPrice  Decimal
    oldDeliveryPrice Decimal
    newDeliveryPrice Decimal
    changedBy      String
    changedAt      DateTime @default(now())
  }

  model Steel {
    id          String   @id @default(uuid())
    size        String   
    grade       Grade
    length      Float    @default(6) 
    price       Decimal
    unit        String   @default("length")
    stockLevel  Int?
    priceHistory SteelPriceHistory[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([size, grade])
  }

  enum Grade {
    Grade33
    Grade40
    Grade60
  }

  model SteelPriceHistory {
    id          String    @id @default(uuid())
    steel       Steel     @relation(fields: [steelId], references: [id])
    steelId     String
    oldPrice    Decimal
    newPrice    Decimal
    changedBy   String
    changedAt   DateTime @default(now())
  }

  model AngleBar {
    id            String   @id @default(uuid())
    size          String   // e.g., "1/8 X 1"
    thickness     Decimal  // mm
    weight        Decimal  // kg
    color         String?  // e.g., Blue, Red, etc.
    price         Decimal
    priceHistory  AngleBarPriceHistory[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
  }

  model ChannelBar {
    id            String   @id @default(uuid())
    size          String   // e.g., "3" X 20"
    type          String?  // e.g., "L"
    weight        Decimal  // kg
    price         Decimal
    priceHistory  ChannelBarPriceHistory[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
  }

  model GICPurlin {
    id            String   @id @default(uuid())
    size          String   // e.g., "2 X 3"
    thickness     Decimal  // mm
    weight        Decimal  // kg
    price         Decimal
    priceHistory  GICPurlinPriceHistory[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
  }

  model GISheet {
    id            String   @id @default(uuid())
    gauge         String   // e.g., "#22"
    thickness     Decimal  // mm
    dimensions    String   // e.g., "4 x 8"
    weight        Decimal  // kg
    price         Decimal
    priceHistory  GISheetPriceHistory[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
  }

  model GITubular {
    id            String   @id @default(uuid())
    size          String   // e.g., "3/4 X 3/4"
    thickness     Decimal  // mm
    weight        Decimal  // kg
    price         Decimal
    priceHistory  GITubularPriceHistory[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
  }

  model MSPlate {
    id            String   @id @default(uuid())
    thickness     Decimal  // mm
    dimensions    String   // e.g., "4 x 8"
    weight        Decimal  // kg
    price         Decimal
    priceHistory  MSPlatePriceHistory[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
  }

  // Price history models for each type
  model AngleBarPriceHistory {
    id          String    @id @default(uuid())
    angleBar    AngleBar  @relation(fields: [angleBarId], references: [id])
    angleBarId  String
    oldPrice    Decimal
    newPrice    Decimal
    changedBy   String
    changedAt   DateTime  @default(now())
  }

  model ChannelBarPriceHistory {
    id            String     @id @default(uuid())
    channelBar    ChannelBar @relation(fields: [channelBarId], references: [id])
    channelBarId  String
    oldPrice      Decimal
    newPrice      Decimal
    changedBy     String
    changedAt     DateTime   @default(now())
  }

  model GICPurlinPriceHistory {
    id            String    @id @default(uuid())
    giCPurlin     GICPurlin @relation(fields: [giCPurlinId], references: [id])
    giCPurlinId   String
    oldPrice      Decimal
    newPrice      Decimal
    changedBy     String
    changedAt     DateTime  @default(now())
  }

  model GISheetPriceHistory {
    id          String    @id @default(uuid())
    giSheet     GISheet   @relation(fields: [giSheetId], references: [id])
    giSheetId   String
    oldPrice    Decimal
    newPrice    Decimal
    changedBy   String
    changedAt   DateTime  @default(now())
  }

  model GITubularPriceHistory {
    id          String    @id @default(uuid())
    giTubular   GITubular @relation(fields: [giTubularId], references: [id])
    giTubularId String
    oldPrice    Decimal
    newPrice    Decimal
    changedBy   String
    changedAt   DateTime  @default(now())
  }

  model MSPlatePriceHistory {
    id          String    @id @default(uuid())
    msPlate     MSPlate   @relation(fields: [msPlateId], references: [id])
    msPlateId   String
    oldPrice    Decimal
    newPrice    Decimal
    changedBy   String
    changedAt   DateTime  @default(now())
  }